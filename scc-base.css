/*                                       Препроцессор Sass 

//Вложенные правила
Sass позволяет вкладывать правила CSS друг в друга. Вложенные правила применяются только для элементов, соответствующих внешним селекторам. Например:
С помощью символа & вы можете явно указать, где должен быть вставлен родительский селектор, например:
a {
  font-weight: bold;
  text-decoration: none;

  &:hover {
    text-decoration: underline;
  }

  body.firefox & {
    font-weight: normal;
  }
}
CSS имеет довольно много свойств в пространстве имен, например, font-family, font-size и font-weight находятся в пространстве имен font
.funky {
  font: {
    family: fantasy;
    size: 30em;
    weight: bold;
  }
}

//Переменные
Переменные начинаются со знака доллара $ и задаются как свойства CSS:
$width: 5em;
// Вы можете обратиться к переменной в свойствах
#main {
  width: $width;
}
Переменные доступны только в пределах того уровня вложенности селекторов, на котором они определены. 
Если они определяются вне каких-либо вложенных селекторов, они доступны глобально. 
Если нужно сделать переменную в каком-либо уровне вложенности была глобальной, можно определить её со специальной меткой !global. Например:
#main {
  $width: 5em !global;
  width: $width;
}
#sidebar {
  width: $width;
}

//Миксины

Миксины объявляются директивой @mixin. После неё должно стоять имя миксина и, опционально, его параметры, и блок, содержащий тело миксина. 
Например, можно определить миксин large-text следующим образом:
@mixin large-text {
  font: {
    family: Arial;
    size: 20px;
    weight: bold;
  }
  color: #ff0000;
}
Миксины вызываются в документ директивой @include. 
Она принимает имя миксина и, опционально, передаваемые в него аргументы, включает стили, определённые этим миксином, в текущее правило. Например:
.page-title {
  @include large-text;
  padding: 4px;
  margin-top: 10px;
}
При определении миксина, аргументы пишутся как имена переменных, разделённые запятыми внутри круглых скобок сразу после имени. 
Затем, при подключении миксина, значения могут быть переданы аналогичным образом. Например:

@mixin border($color, $width: 1in) { //width по умолчанию 1in
  border: {
    color: $color;
    width: $width;
    style: dashed;
  }
}
p { 
  @include border(blue, 1in);
}

//Функции 
функции имеют доступ к любым глобальным переменным, а также принимают параметры как и миксины (примеси). 
Функция может содержать несколько операторов, и вы должны вызвать @return, чтобы установить возвращаемое значение функции.
$grid-width: 40px;
$gutter-width: 10px;

@function grid-width($n) {
  @return $n * $grid-width + ($n - 1) * $gutter-width;
}

#sidebar {
  width: grid-width(5);
}

//Цикл for
Для записи цикла используется конструкция @for, у которой необходимо указать счётчик
Счётчик в цикле @for может быть записан одним из двух видов. Примеры для счётчика от 1 до 5:
- from 1 to 5.      (<5)
- from 1 through 5. (<=5)

@for $i from 1 to 5 {
  $side: $i * 10;
  .square-#{$side} {
    display: block;
    width: #{$side}px;
    height: #{$side}px
  }
}
Css:
.square-10 {
  display: block;
  width: 10px;
  height: 10px;
}
.square-20 {
  display: block;
  width: 20px;
  height: 20px;
}
*/


/*                                             CSS

//gap (grid-gap)
Свойство задаёт значение для <'row-gap'>, за которым может следовать значение для <'column-gap'>. 
Если <'column-gap'> опущено, то оно устанавливается в то же значение, что и <'row-gap'>.
<'row-gap'> и <'column-gap'> могут быть заданы как <length>, так и <percentage>.

//flex
Свойство CSS flex - это сокращённое свойство, определяющее способность гибкого элемента растягиваться или сжиматься для заполнения собой доступного свободного пространства. 
Это свойство устанавливает flex-grow, flex-shrink и flex-basis.
- flex-grow(0) определяет как много свободного пространства во flex-контейнере должно быть назначено текущему элементу (flex grow factor — «коэффициент увеличения flex»). 
- flex-shrink(1)  определяет cтепень сжатия flex-элемента. Flex-элементы будут заполнять контейнер в зависимости от коэфф. flex-shrink, когда стандартная ширина flex-элементов шире, чем flex-контейнер.
- flex-basis(auto) задаёт базовый размер флекс элемента по основной оси. Это свойство определяет размер контент-бокса, если не задано иначе через box-sizing

//grid
Принцип работы гридов чем-то похож на таблицы. Вместо работы только с рядами или только с колонками с помощью гридов можно работать с так называемыми грид-ячейками, позиционируя элементы по вертикали и горизонтали одновременно.
-Грид-контейнер: родительский элемент, к которому применяется свойство display: grid.
-Грид-элемент: дочерний элемент, прямой потомок грид-контейнера. Подчиняется правилам раскладки гридов.
-Грид-линия: разделительная линия, формирующая структуру грида. Может быть как вертикальной (грид-линия колонки), так и горизонтальной (грид-линия ряда). Располагается по обе стороны от колонки или ряда. Используется для привязки грид-элементов.
.container {
  display: grid;
  // Будет создано 3 колонки 
  grid-template-columns: 150px auto 40%;
  // Будет создано 3 ряда 
  grid-template-rows: 250px 10vw 15rem;
}

Если нужны одинаковые колонки или ряды, то можно воспользоваться функцией repeat().
Будет создано 3 колонки по 250 пикселей:
.container {
  display: grid;
  grid-template-columns: repeat(3, 250px);
}

//justify-content
Определяет, как браузер распределяет пространство между и вокруг элементов контента вдоль главной оси flex контейнера, или вдоль строчной оси grid контейнера.

*/